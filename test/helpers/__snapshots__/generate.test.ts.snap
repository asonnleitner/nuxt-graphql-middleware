// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generate > Generates templates correctly for auto imported documents 1`] = `
{
  "content": "const documents = {
  "query": {
    "simulateEndpointDown": "query simulateEndpointDown {\\n  testFetchOptions {\\n    headerClient\\n    headerServer\\n  }\\n}",
    "fetchOptions": "query fetchOptions {\\n  testFetchOptions {\\n    headerClient\\n    headerServer\\n  }\\n}",
    "users": "query users {\\n  users {\\n    ...user\\n  }\\n}\\n\\nfragment user on User {\\n  id\\n  firstName\\n  lastName\\n  email\\n  description\\n  dateOfBirth\\n}",
    "getError": "query getError {\\n  getError\\n}",
    "userById": "query userById($id: ID!) {\\n  userById(id: $id) {\\n    ...user\\n  }\\n}\\n\\nfragment user on User {\\n  id\\n  firstName\\n  lastName\\n  email\\n  description\\n  dateOfBirth\\n}",
    "foobar": "query foobar {\\n  users {\\n    ...user\\n  }\\n}\\n\\nfragment user on User {\\n  id\\n  firstName\\n  lastName\\n  email\\n  description\\n  dateOfBirth\\n}",
    "queryTwo": "query queryTwo {\\n  two: users {\\n    ...user\\n  }\\n}\\n\\nfragment user on User {\\n  id\\n  firstName\\n  lastName\\n  email\\n  description\\n  dateOfBirth\\n}",
    "queryOne": "query queryOne {\\n  one: users {\\n    ...user\\n  }\\n}\\n\\nfragment user on User {\\n  id\\n  firstName\\n  lastName\\n  email\\n  description\\n  dateOfBirth\\n}"
  },
  "mutation": {
    "testFormSubmit": "mutation testFormSubmit($elements: [FormElement]) {\\n  submitForm(elements: $elements)\\n}",
    "testUpload": "mutation testUpload($id: String!, $file: Upload!) {\\n  uploadFile(id: $id, file: $file) {\\n    id\\n    filename\\n  }\\n}",
    "initState": "mutation initState {\\n  initState\\n}",
    "addUser": "mutation addUser($user: UserData!) {\\n  createUser(user: $user) {\\n    ...user\\n  }\\n}\\n\\nfragment user on User {\\n  id\\n  firstName\\n  lastName\\n  email\\n  description\\n  dateOfBirth\\n}",
    "triggerError": "mutation triggerError {\\n  triggerError\\n}",
    "deleteUser": "mutation deleteUser($id: Int!) {\\n  deleteUser(id: $id)\\n}"
  }
};
export { documents };",
  "filename": "graphql-documents.mjs",
  "hooks": {},
}
`;

exports[`generate > Generates templates correctly for auto imported documents 2`] = `
{
  "content": "export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** The \`Upload\` scalar type represents a file upload. */
  Upload: { input: any; output: any; }
};

export type File = {
  __typename?: 'File';
  filename: Scalars['String']['output'];
  id: Scalars['String']['output'];
};

export type FormElement = {
  file: Scalars['Upload']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  createUser: User;
  deleteUser?: Maybe<Scalars['Boolean']['output']>;
  initState: Scalars['Boolean']['output'];
  submitForm: Scalars['Boolean']['output'];
  triggerError?: Maybe<Scalars['Boolean']['output']>;
  uploadFile: File;
};


export type MutationCreateUserArgs = {
  user: UserData;
};


export type MutationDeleteUserArgs = {
  id: Scalars['Int']['input'];
};


export type MutationSubmitFormArgs = {
  elements?: InputMaybe<Array<InputMaybe<FormElement>>>;
};


export type MutationUploadFileArgs = {
  file: Scalars['Upload']['input'];
  id: Scalars['String']['input'];
};

export type Query = {
  __typename?: 'Query';
  getError?: Maybe<Scalars['Boolean']['output']>;
  testFetchOptions?: Maybe<TestFetchOptions>;
  userById?: Maybe<User>;
  users: Array<User>;
};


export type QueryUserByIdArgs = {
  id: Scalars['ID']['input'];
};

export type TestFetchOptions = {
  __typename?: 'TestFetchOptions';
  headerClient?: Maybe<Scalars['String']['output']>;
  headerServer?: Maybe<Scalars['String']['output']>;
};

export type User = {
  __typename?: 'User';
  dateOfBirth?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  email: Scalars['String']['output'];
  firstName: Scalars['String']['output'];
  friends?: Maybe<Array<Maybe<User>>>;
  id: Scalars['Int']['output'];
  lastName: Scalars['String']['output'];
};

export type UserData = {
  dateOfBirth?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  firstName: Scalars['String']['input'];
  lastName: Scalars['String']['input'];
};

export type TestFormSubmitMutationVariables = Exact<{
  elements?: InputMaybe<Array<InputMaybe<FormElement>> | InputMaybe<FormElement>>;
}>;


export type TestFormSubmitMutation = { __typename?: 'Mutation', submitForm: boolean };

export type SimulateEndpointDownQueryVariables = Exact<{ [key: string]: never; }>;


export type SimulateEndpointDownQuery = { __typename?: 'Query', testFetchOptions?: { __typename?: 'TestFetchOptions', headerClient?: string | null, headerServer?: string | null } | null };

export type FetchOptionsQueryVariables = Exact<{ [key: string]: never; }>;


export type FetchOptionsQuery = { __typename?: 'Query', testFetchOptions?: { __typename?: 'TestFetchOptions', headerClient?: string | null, headerServer?: string | null } | null };

export type UserFragment = { __typename?: 'User', id: number, firstName: string, lastName: string, email: string, description?: string | null, dateOfBirth?: string | null };

export type TestUploadMutationVariables = Exact<{
  id: Scalars['String']['input'];
  file: Scalars['Upload']['input'];
}>;


export type TestUploadMutation = { __typename?: 'Mutation', uploadFile: { __typename?: 'File', id: string, filename: string } };

export type UsersQueryVariables = Exact<{ [key: string]: never; }>;


export type UsersQuery = { __typename?: 'Query', users: Array<{ __typename?: 'User', id: number, firstName: string, lastName: string, email: string, description?: string | null, dateOfBirth?: string | null }> };

export type GetErrorQueryVariables = Exact<{ [key: string]: never; }>;


export type GetErrorQuery = { __typename?: 'Query', getError?: boolean | null };

export type UserByIdQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type UserByIdQuery = { __typename?: 'Query', userById?: { __typename?: 'User', id: number, firstName: string, lastName: string, email: string, description?: string | null, dateOfBirth?: string | null } | null };

export type InitStateMutationVariables = Exact<{ [key: string]: never; }>;


export type InitStateMutation = { __typename?: 'Mutation', initState: boolean };

export type AddUserMutationVariables = Exact<{
  user: UserData;
}>;


export type AddUserMutation = { __typename?: 'Mutation', createUser: { __typename?: 'User', id: number, firstName: string, lastName: string, email: string, description?: string | null, dateOfBirth?: string | null } };

export type FoobarQueryVariables = Exact<{ [key: string]: never; }>;


export type FoobarQuery = { __typename?: 'Query', users: Array<{ __typename?: 'User', id: number, firstName: string, lastName: string, email: string, description?: string | null, dateOfBirth?: string | null }> };

export type QueryTwoQueryVariables = Exact<{ [key: string]: never; }>;


export type QueryTwoQuery = { __typename?: 'Query', two: Array<{ __typename?: 'User', id: number, firstName: string, lastName: string, email: string, description?: string | null, dateOfBirth?: string | null }> };

export type QueryOneQueryVariables = Exact<{ [key: string]: never; }>;


export type QueryOneQuery = { __typename?: 'Query', one: Array<{ __typename?: 'User', id: number, firstName: string, lastName: string, email: string, description?: string | null, dateOfBirth?: string | null }> };

export type TriggerErrorMutationVariables = Exact<{ [key: string]: never; }>;


export type TriggerErrorMutation = { __typename?: 'Mutation', triggerError?: boolean | null };

export type DeleteUserMutationVariables = Exact<{
  id: Scalars['Int']['input'];
}>;


export type DeleteUserMutation = { __typename?: 'Mutation', deleteUser?: boolean | null };
",
  "filename": "graphql-operations.d.ts",
  "hooks": {},
}
`;

exports[`generate > Generates templates correctly for auto imported documents 3`] = `
{
  "content": "
import type { GraphqlResponse } from '#graphql-middleware-server-options-build'
import type {
  SimulateEndpointDownQuery,
  FetchOptionsQuery,
  UsersQuery,
  GetErrorQuery,
  UserByIdQuery,
  UserByIdQueryVariables,
  FoobarQuery,
  QueryTwoQuery,
  QueryOneQuery,
  TestFormSubmitMutation,
  TestFormSubmitMutationVariables,
  TestUploadMutation,
  TestUploadMutationVariables,
  InitStateMutation,
  AddUserMutation,
  AddUserMutationVariables,
  TriggerErrorMutation,
  DeleteUserMutation,
  DeleteUserMutationVariables
} from './graphql-operations'


declare module '#build/nuxt-graphql-middleware' {
  export type GraphqlMiddlewareResponseUnion = SimulateEndpointDownQuery | FetchOptionsQuery | UsersQuery | GetErrorQuery | UserByIdQuery | FoobarQuery | QueryTwoQuery | QueryOneQuery | TestFormSubmitMutation | TestUploadMutation | InitStateMutation | AddUserMutation | TriggerErrorMutation | DeleteUserMutation
  export type GraphqlMiddlewareQuery = {
    simulateEndpointDown: [null, true, SimulateEndpointDownQuery],
    fetchOptions: [null, true, FetchOptionsQuery],
    users: [null, true, UsersQuery],
    getError: [null, true, GetErrorQuery],
    userById: [UserByIdQueryVariables, false, UserByIdQuery],
    foobar: [null, true, FoobarQuery],
    queryTwo: [null, true, QueryTwoQuery],
    queryOne: [null, true, QueryOneQuery]
  }

  export type GraphqlMiddlewareMutation = {
    testFormSubmit: [TestFormSubmitMutationVariables, false, TestFormSubmitMutation],
    testUpload: [TestUploadMutationVariables, false, TestUploadMutation],
    initState: [null, true, InitStateMutation],
    addUser: [AddUserMutationVariables, false, AddUserMutation],
    triggerError: [null, true, TriggerErrorMutation],
    deleteUser: [DeleteUserMutationVariables, false, DeleteUserMutation]
  }

}

declare module 'nitropack' {
  interface InternalApi {
    'undefined/query/simulateEndpointDown': {
      'default': GraphqlResponse<SimulateEndpointDownQuery>
    }
    'undefined/query/fetchOptions': {
      'default': GraphqlResponse<FetchOptionsQuery>
    }
    'undefined/query/users': {
      'default': GraphqlResponse<UsersQuery>
    }
    'undefined/query/getError': {
      'default': GraphqlResponse<GetErrorQuery>
    }
    'undefined/query/userById': {
      'default': GraphqlResponse<UserByIdQuery>
    }
    'undefined/query/foobar': {
      'default': GraphqlResponse<FoobarQuery>
    }
    'undefined/query/queryTwo': {
      'default': GraphqlResponse<QueryTwoQuery>
    }
    'undefined/query/queryOne': {
      'default': GraphqlResponse<QueryOneQuery>
    }
    'undefined/mutation/testFormSubmit': {
      'default': GraphqlResponse<TestFormSubmitMutation>
    }
    'undefined/mutation/testUpload': {
      'default': GraphqlResponse<TestUploadMutation>
    }
    'undefined/mutation/initState': {
      'default': GraphqlResponse<InitStateMutation>
    }
    'undefined/mutation/addUser': {
      'default': GraphqlResponse<AddUserMutation>
    }
    'undefined/mutation/triggerError': {
      'default': GraphqlResponse<TriggerErrorMutation>
    }
    'undefined/mutation/deleteUser': {
      'default': GraphqlResponse<DeleteUserMutation>
    }
  }
}
",
  "filename": "nuxt-graphql-middleware.d.ts",
  "hooks": {},
}
`;

exports[`generate > Generates templates correctly for auto imported documents using autoInlineFragments 1`] = `
{
  "content": "const documents = {
  "query": {
    "highDepthOne": "query highDepthOne {\\n  ...depthOneQuery\\n  one: users {\\n    ...depthOneUser\\n  }\\n}\\n\\nfragment depthOneQuery on Query {\\n  one: users {\\n    ...depthOneUser\\n  }\\n}\\n\\nfragment depthOneUser on User {\\n  firstName\\n  friends {\\n    ...depthTwoUser\\n  }\\n}\\n\\nfragment depthTwoUser on User {\\n  firstName\\n}"
  },
  "mutation": {}
};
export { documents };",
  "filename": "graphql-documents.mjs",
  "hooks": {},
}
`;

exports[`generate > Generates templates correctly for auto imported documents using autoInlineFragments 2`] = `
{
  "content": "export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** The \`Upload\` scalar type represents a file upload. */
  Upload: { input: any; output: any; }
};

export type File = {
  __typename?: 'File';
  filename: Scalars['String']['output'];
  id: Scalars['String']['output'];
};

export type FormElement = {
  file: Scalars['Upload']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  createUser: User;
  deleteUser?: Maybe<Scalars['Boolean']['output']>;
  initState: Scalars['Boolean']['output'];
  submitForm: Scalars['Boolean']['output'];
  triggerError?: Maybe<Scalars['Boolean']['output']>;
  uploadFile: File;
};


export type MutationCreateUserArgs = {
  user: UserData;
};


export type MutationDeleteUserArgs = {
  id: Scalars['Int']['input'];
};


export type MutationSubmitFormArgs = {
  elements?: InputMaybe<Array<InputMaybe<FormElement>>>;
};


export type MutationUploadFileArgs = {
  file: Scalars['Upload']['input'];
  id: Scalars['String']['input'];
};

export type Query = {
  __typename?: 'Query';
  getError?: Maybe<Scalars['Boolean']['output']>;
  testFetchOptions?: Maybe<TestFetchOptions>;
  userById?: Maybe<User>;
  users: Array<User>;
};


export type QueryUserByIdArgs = {
  id: Scalars['ID']['input'];
};

export type TestFetchOptions = {
  __typename?: 'TestFetchOptions';
  headerClient?: Maybe<Scalars['String']['output']>;
  headerServer?: Maybe<Scalars['String']['output']>;
};

export type User = {
  __typename?: 'User';
  dateOfBirth?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  email: Scalars['String']['output'];
  firstName: Scalars['String']['output'];
  friends?: Maybe<Array<Maybe<User>>>;
  id: Scalars['Int']['output'];
  lastName: Scalars['String']['output'];
};

export type UserData = {
  dateOfBirth?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  firstName: Scalars['String']['input'];
  lastName: Scalars['String']['input'];
};

export type DepthOneUserFragment = { __typename?: 'User', firstName: string, friends?: Array<{ __typename?: 'User', firstName: string } | null> | null };

export type DepthTwoUserFragment = { __typename?: 'User', firstName: string };

export type HighDepthOneQueryVariables = Exact<{ [key: string]: never; }>;


export type HighDepthOneQuery = { __typename?: 'Query', one: Array<{ __typename?: 'User', firstName: string, friends?: Array<{ __typename?: 'User', firstName: string } | null> | null }> };

export type DepthOneQueryFragment = { __typename?: 'Query', one: Array<{ __typename?: 'User', firstName: string, friends?: Array<{ __typename?: 'User', firstName: string } | null> | null }> };
",
  "filename": "graphql-operations.d.ts",
  "hooks": {},
}
`;

exports[`generate > Generates templates correctly for auto imported documents using autoInlineFragments 3`] = `
{
  "content": "
import type { GraphqlResponse } from '#graphql-middleware-server-options-build'
import type {
  HighDepthOneQuery
} from './graphql-operations'


declare module '#build/nuxt-graphql-middleware' {
  export type GraphqlMiddlewareResponseUnion = HighDepthOneQuery
  export type GraphqlMiddlewareQuery = {
    highDepthOne: [null, true, HighDepthOneQuery]
  }


}

declare module 'nitropack' {
  interface InternalApi {
    'undefined/query/highDepthOne': {
      'default': GraphqlResponse<HighDepthOneQuery>
    }

  }
}
",
  "filename": "nuxt-graphql-middleware.d.ts",
  "hooks": {},
}
`;

exports[`generate > Generates templates correctly for provided documents 1`] = `
{
  "documents": [
    {
      "content": "query one {
  users {
    id
  }
}",
      "errors": [],
      "filename": "nuxt.config.ts",
      "id": "query_one_nuxt.config.ts",
      "isValid": true,
      "name": "one",
      "operation": "query",
      "relativePath": "nuxt.config.ts",
    },
    {
      "content": "mutation two($id: Int!) {
  deleteUser(id: $id)
}",
      "errors": [],
      "filename": "nuxt.config.ts",
      "id": "mutation_two_nuxt.config.ts",
      "isValid": true,
      "name": "two",
      "operation": "mutation",
      "relativePath": "nuxt.config.ts",
    },
  ],
  "hasErrors": false,
  "templates": [
    {
      "content": "const documents = {
  "query": {
    "one": "query one {\\n  users {\\n    id\\n  }\\n}"
  },
  "mutation": {
    "two": "mutation two($id: Int!) {\\n  deleteUser(id: $id)\\n}"
  }
};
export { documents };",
      "filename": "graphql-documents.mjs",
      "hooks": {},
    },
    {
      "content": "export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** The \`Upload\` scalar type represents a file upload. */
  Upload: { input: any; output: any; }
};

export type File = {
  __typename?: 'File';
  filename: Scalars['String']['output'];
  id: Scalars['String']['output'];
};

export type FormElement = {
  file: Scalars['Upload']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  createUser: User;
  deleteUser?: Maybe<Scalars['Boolean']['output']>;
  initState: Scalars['Boolean']['output'];
  submitForm: Scalars['Boolean']['output'];
  triggerError?: Maybe<Scalars['Boolean']['output']>;
  uploadFile: File;
};


export type MutationCreateUserArgs = {
  user: UserData;
};


export type MutationDeleteUserArgs = {
  id: Scalars['Int']['input'];
};


export type MutationSubmitFormArgs = {
  elements?: InputMaybe<Array<InputMaybe<FormElement>>>;
};


export type MutationUploadFileArgs = {
  file: Scalars['Upload']['input'];
  id: Scalars['String']['input'];
};

export type Query = {
  __typename?: 'Query';
  getError?: Maybe<Scalars['Boolean']['output']>;
  testFetchOptions?: Maybe<TestFetchOptions>;
  userById?: Maybe<User>;
  users: Array<User>;
};


export type QueryUserByIdArgs = {
  id: Scalars['ID']['input'];
};

export type TestFetchOptions = {
  __typename?: 'TestFetchOptions';
  headerClient?: Maybe<Scalars['String']['output']>;
  headerServer?: Maybe<Scalars['String']['output']>;
};

export type User = {
  __typename?: 'User';
  dateOfBirth?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  email: Scalars['String']['output'];
  firstName: Scalars['String']['output'];
  friends?: Maybe<Array<Maybe<User>>>;
  id: Scalars['Int']['output'];
  lastName: Scalars['String']['output'];
};

export type UserData = {
  dateOfBirth?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  firstName: Scalars['String']['input'];
  lastName: Scalars['String']['input'];
};

export type TwoMutationVariables = Exact<{
  id: Scalars['Int']['input'];
}>;


export type TwoMutation = { __typename?: 'Mutation', deleteUser?: boolean | null };

export type OneQueryVariables = Exact<{ [key: string]: never; }>;


export type OneQuery = { __typename?: 'Query', users: Array<{ __typename?: 'User', id: number }> };
",
      "filename": "graphql-operations.d.ts",
      "hooks": {},
    },
    {
      "content": "
import type { GraphqlResponse } from '#graphql-middleware-server-options-build'
import type {
  OneQuery,
  TwoMutation,
  TwoMutationVariables
} from './graphql-operations'


declare module '#build/nuxt-graphql-middleware' {
  export type GraphqlMiddlewareResponseUnion = OneQuery | TwoMutation
  export type GraphqlMiddlewareQuery = {
    one: [null, true, OneQuery]
  }

  export type GraphqlMiddlewareMutation = {
    two: [TwoMutationVariables, false, TwoMutation]
  }

}

declare module 'nitropack' {
  interface InternalApi {
    'undefined/query/one': {
      'default': GraphqlResponse<OneQuery>
    }
    'undefined/mutation/two': {
      'default': GraphqlResponse<TwoMutation>
    }
  }
}
",
      "filename": "nuxt-graphql-middleware.d.ts",
      "hooks": {},
    },
  ],
}
`;

exports[`generate > Renders a table with information about all documents with errors. 1`] = `
"GraphQL code generation table:
┌───────────┬──────┬────────────────┬───────────────────────────────────────────┐
│ Operation │ Name │ File           │ Errors                                    │
├───────────┼──────┼────────────────┼───────────────────────────────────────────┤
│           │      │ nuxt.config.ts │ Syntax Error: Expected Name, found <EOF>. │
│           │      │                │                                           │
│           │      │                │ nuxt.config.ts:3:11                       │
│           │      │                │ 2 |             id                        │
│           │      │                │ 3 |                                       │
│           │      │                │   |           ^                           │
├───────────┼──────┼────────────────┼───────────────────────────────────────────┤
│           │      │ nuxt.config.ts │ Syntax Error: Expected Name, found <EOF>. │
│           │      │                │                                           │
│           │      │                │ nuxt.config.ts:3:11                       │
│           │      │                │ 2 |             id                        │
│           │      │                │ 3 |                                       │
│           │      │                │   |           ^                           │
└───────────┴──────┴────────────────┴───────────────────────────────────────────┘"
`;

exports[`generate > Renders a table with information about all documents. 1`] = `
"GraphQL code generation table:
┌───────────┬────────────────┬────────────────┬────────┐
│ Operation │ Name           │ File           │ Errors │
├───────────┼────────────────┼────────────────┼────────┤
│           │ nuxt.config.ts │ nuxt.config.ts │        │
├───────────┼────────────────┼────────────────┼────────┤
│ query     │ one            │ nuxt.config.ts │        │
├───────────┼────────────────┼────────────────┼────────┤
│ mutation  │ two            │ nuxt.config.ts │        │
└───────────┴────────────────┴────────────────┴────────┘"
`;
